// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m1thrandir225/imperium/apps/client/internal/server/ (interfaces: AuthHandler)
//
// Generated by this command:
//
//	mockgen -package mockserver -destination internal/server/mocks/auth_handler.go github.com/m1thrandir225/imperium/apps/client/internal/server/ AuthHandler
//

// Package mockserver is a generated GoMock package.
package mockserver

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthHandler is a mock of AuthHandler interface.
type MockAuthHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAuthHandlerMockRecorder
	isgomock struct{}
}

// MockAuthHandlerMockRecorder is the mock recorder for MockAuthHandler.
type MockAuthHandlerMockRecorder struct {
	mock *MockAuthHandler
}

// NewMockAuthHandler creates a new mock instance.
func NewMockAuthHandler(ctrl *gomock.Controller) *MockAuthHandler {
	mock := &MockAuthHandler{ctrl: ctrl}
	mock.recorder = &MockAuthHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthHandler) EXPECT() *MockAuthHandlerMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthHandler) Login(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Login", ctx)
}

// Login indicates an expected call of Login.
func (mr *MockAuthHandlerMockRecorder) Login(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthHandler)(nil).Login), ctx)
}

// RefreshToken mocks base method.
func (m *MockAuthHandler) RefreshToken(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RefreshToken", ctx)
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockAuthHandlerMockRecorder) RefreshToken(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockAuthHandler)(nil).RefreshToken), ctx)
}

// Register mocks base method.
func (m *MockAuthHandler) Register(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", ctx)
}

// Register indicates an expected call of Register.
func (mr *MockAuthHandlerMockRecorder) Register(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthHandler)(nil).Register), ctx)
}
