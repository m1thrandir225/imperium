// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m1thrandir225/imperium/apps/client/internal/server/ (interfaces: ConfigHandler)
//
// Generated by this command:
//
//	mockgen -package mockserver -destination internal/server/mocks/config_handler.go github.com/m1thrandir225/imperium/apps/client/internal/server/ ConfigHandler
//

// Package mockserver is a generated GoMock package.
package mockserver

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockConfigHandler is a mock of ConfigHandler interface.
type MockConfigHandler struct {
	ctrl     *gomock.Controller
	recorder *MockConfigHandlerMockRecorder
	isgomock struct{}
}

// MockConfigHandlerMockRecorder is the mock recorder for MockConfigHandler.
type MockConfigHandlerMockRecorder struct {
	mock *MockConfigHandler
}

// NewMockConfigHandler creates a new mock instance.
func NewMockConfigHandler(ctrl *gomock.Controller) *MockConfigHandler {
	mock := &MockConfigHandler{ctrl: ctrl}
	mock.recorder = &MockConfigHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigHandler) EXPECT() *MockConfigHandlerMockRecorder {
	return m.recorder
}

// GetConfigStatus mocks base method.
func (m *MockConfigHandler) GetConfigStatus(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetConfigStatus", ctx)
}

// GetConfigStatus indicates an expected call of GetConfigStatus.
func (mr *MockConfigHandlerMockRecorder) GetConfigStatus(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigStatus", reflect.TypeOf((*MockConfigHandler)(nil).GetConfigStatus), ctx)
}

// SetupConfig mocks base method.
func (m *MockConfigHandler) SetupConfig(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetupConfig", ctx)
}

// SetupConfig indicates an expected call of SetupConfig.
func (mr *MockConfigHandlerMockRecorder) SetupConfig(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupConfig", reflect.TypeOf((*MockConfigHandler)(nil).SetupConfig), ctx)
}
