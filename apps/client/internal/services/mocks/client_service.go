// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m1thrandir225/imperium/apps/client/internal/services/ (interfaces: ClientService)
//
// Generated by this command:
//
//	mockgen -package mockservices -destination internal/services/mocks/client_service.go github.com/m1thrandir225/imperium/apps/client/internal/services/ ClientService
//

// Package mockservices is a generated GoMock package.
package mockservices

import (
	context "context"
	reflect "reflect"

	models "github.com/m1thrandir225/imperium/apps/client/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockClientService is a mock of ClientService interface.
type MockClientService struct {
	ctrl     *gomock.Controller
	recorder *MockClientServiceMockRecorder
	isgomock struct{}
}

// MockClientServiceMockRecorder is the mock recorder for MockClientService.
type MockClientServiceMockRecorder struct {
	mock *MockClientService
}

// NewMockClientService creates a new mock instance.
func NewMockClientService(ctrl *gomock.Controller) *MockClientService {
	mock := &MockClientService{ctrl: ctrl}
	mock.recorder = &MockClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientService) EXPECT() *MockClientServiceMockRecorder {
	return m.recorder
}

// GetClientInfo mocks base method.
func (m *MockClientService) GetClientInfo() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientInfo")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClientInfo indicates an expected call of GetClientInfo.
func (mr *MockClientServiceMockRecorder) GetClientInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientInfo", reflect.TypeOf((*MockClientService)(nil).GetClientInfo))
}

// RegisterOrUpdateClient mocks base method.
func (m *MockClientService) RegisterOrUpdateClient(ctx context.Context, req models.RegisterClientRequest, token string) (*models.RegisterClientResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterOrUpdateClient", ctx, req, token)
	ret0, _ := ret[0].(*models.RegisterClientResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterOrUpdateClient indicates an expected call of RegisterOrUpdateClient.
func (mr *MockClientServiceMockRecorder) RegisterOrUpdateClient(ctx, req, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOrUpdateClient", reflect.TypeOf((*MockClientService)(nil).RegisterOrUpdateClient), ctx, req, token)
}

// UpdateBaseURL mocks base method.
func (m *MockClientService) UpdateBaseURL(url string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateBaseURL", url)
}

// UpdateBaseURL indicates an expected call of UpdateBaseURL.
func (mr *MockClientServiceMockRecorder) UpdateBaseURL(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBaseURL", reflect.TypeOf((*MockClientService)(nil).UpdateBaseURL), url)
}
