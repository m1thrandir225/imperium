// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m1thrandir225/imperium/apps/client/internal/services/ (interfaces: SessionService)
//
// Generated by this command:
//
//	mockgen -package mockservices -destination internal/services/mocks/session_service.go github.com/m1thrandir225/imperium/apps/client/internal/services/ SessionService
//

// Package mockservices is a generated GoMock package.
package mockservices

import (
	context "context"
	reflect "reflect"

	models "github.com/m1thrandir225/imperium/apps/client/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockSessionService is a mock of SessionService interface.
type MockSessionService struct {
	ctrl     *gomock.Controller
	recorder *MockSessionServiceMockRecorder
	isgomock struct{}
}

// MockSessionServiceMockRecorder is the mock recorder for MockSessionService.
type MockSessionServiceMockRecorder struct {
	mock *MockSessionService
}

// NewMockSessionService creates a new mock instance.
func NewMockSessionService(ctrl *gomock.Controller) *MockSessionService {
	mock := &MockSessionService{ctrl: ctrl}
	mock.recorder = &MockSessionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionService) EXPECT() *MockSessionServiceMockRecorder {
	return m.recorder
}

// CancelSession mocks base method.
func (m *MockSessionService) CancelSession(ctx context.Context, sessionID, reason, token string) (*models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSession", ctx, sessionID, reason, token)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelSession indicates an expected call of CancelSession.
func (mr *MockSessionServiceMockRecorder) CancelSession(ctx, sessionID, reason, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSession", reflect.TypeOf((*MockSessionService)(nil).CancelSession), ctx, sessionID, reason, token)
}

// CreateSession mocks base method.
func (m *MockSessionService) CreateSession(ctx context.Context, req models.CreateSessionRequest, token string) (*models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, req, token)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockSessionServiceMockRecorder) CreateSession(ctx, req, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockSessionService)(nil).CreateSession), ctx, req, token)
}

// EndSession mocks base method.
func (m *MockSessionService) EndSession(ctx context.Context, sessionID string, req models.EndSessionRequest, token string) (*models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndSession", ctx, sessionID, req, token)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndSession indicates an expected call of EndSession.
func (mr *MockSessionServiceMockRecorder) EndSession(ctx, sessionID, req, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndSession", reflect.TypeOf((*MockSessionService)(nil).EndSession), ctx, sessionID, req, token)
}

// GetSession mocks base method.
func (m *MockSessionService) GetSession(ctx context.Context, sessionID, token string) (*models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, sessionID, token)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockSessionServiceMockRecorder) GetSession(ctx, sessionID, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockSessionService)(nil).GetSession), ctx, sessionID, token)
}

// StartSession mocks base method.
func (m *MockSessionService) StartSession(ctx context.Context, sessionID string, req models.StartSessionRequest, token string) (*models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSession", ctx, sessionID, req, token)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSession indicates an expected call of StartSession.
func (mr *MockSessionServiceMockRecorder) StartSession(ctx, sessionID, req, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSession", reflect.TypeOf((*MockSessionService)(nil).StartSession), ctx, sessionID, req, token)
}

// UpdateBaseURL mocks base method.
func (m *MockSessionService) UpdateBaseURL(url string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateBaseURL", url)
}

// UpdateBaseURL indicates an expected call of UpdateBaseURL.
func (mr *MockSessionServiceMockRecorder) UpdateBaseURL(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBaseURL", reflect.TypeOf((*MockSessionService)(nil).UpdateBaseURL), url)
}
