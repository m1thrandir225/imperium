// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m1thrandir225/imperium/apps/host/internal/programs (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -package mockprograms -destination internal/programs/mocks/service.go github.com/m1thrandir225/imperium/apps/host/internal/programs Service
//

// Package mockprograms is a generated GoMock package.
package mockprograms

import (
	exec "os/exec"
	reflect "reflect"

	programs "github.com/m1thrandir225/imperium/apps/host/internal/programs"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// DiscoverAndSavePrograms mocks base method.
func (m *MockService) DiscoverAndSavePrograms(paths []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverAndSavePrograms", paths)
	ret0, _ := ret[0].(error)
	return ret0
}

// DiscoverAndSavePrograms indicates an expected call of DiscoverAndSavePrograms.
func (mr *MockServiceMockRecorder) DiscoverAndSavePrograms(paths any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverAndSavePrograms", reflect.TypeOf((*MockService)(nil).DiscoverAndSavePrograms), paths)
}

// DiscoverPrograms mocks base method.
func (m *MockService) DiscoverPrograms() ([]programs.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverPrograms")
	ret0, _ := ret[0].([]programs.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscoverPrograms indicates an expected call of DiscoverPrograms.
func (mr *MockServiceMockRecorder) DiscoverPrograms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverPrograms", reflect.TypeOf((*MockService)(nil).DiscoverPrograms))
}

// DiscoverProgramsIn mocks base method.
func (m *MockService) DiscoverProgramsIn(paths []string) ([]programs.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverProgramsIn", paths)
	ret0, _ := ret[0].([]programs.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscoverProgramsIn indicates an expected call of DiscoverProgramsIn.
func (mr *MockServiceMockRecorder) DiscoverProgramsIn(paths any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverProgramsIn", reflect.TypeOf((*MockService)(nil).DiscoverProgramsIn), paths)
}

// GetLocalProgramByID mocks base method.
func (m *MockService) GetLocalProgramByID(id string) (*programs.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalProgramByID", id)
	ret0, _ := ret[0].(*programs.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalProgramByID indicates an expected call of GetLocalProgramByID.
func (mr *MockServiceMockRecorder) GetLocalProgramByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalProgramByID", reflect.TypeOf((*MockService)(nil).GetLocalProgramByID), id)
}

// GetLocalProgramByPath mocks base method.
func (m *MockService) GetLocalProgramByPath(path string) (*programs.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalProgramByPath", path)
	ret0, _ := ret[0].(*programs.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalProgramByPath indicates an expected call of GetLocalProgramByPath.
func (mr *MockServiceMockRecorder) GetLocalProgramByPath(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalProgramByPath", reflect.TypeOf((*MockService)(nil).GetLocalProgramByPath), path)
}

// GetLocalPrograms mocks base method.
func (m *MockService) GetLocalPrograms() ([]*programs.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalPrograms")
	ret0, _ := ret[0].([]*programs.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalPrograms indicates an expected call of GetLocalPrograms.
func (mr *MockServiceMockRecorder) GetLocalPrograms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalPrograms", reflect.TypeOf((*MockService)(nil).GetLocalPrograms))
}

// GetWindowTitleByProcessID mocks base method.
func (m *MockService) GetWindowTitleByProcessID(pid uint32) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWindowTitleByProcessID", pid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWindowTitleByProcessID indicates an expected call of GetWindowTitleByProcessID.
func (mr *MockServiceMockRecorder) GetWindowTitleByProcessID(pid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWindowTitleByProcessID", reflect.TypeOf((*MockService)(nil).GetWindowTitleByProcessID), pid)
}

// LaunchProgram mocks base method.
func (m *MockService) LaunchProgram(path string) (*exec.Cmd, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LaunchProgram", path)
	ret0, _ := ret[0].(*exec.Cmd)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LaunchProgram indicates an expected call of LaunchProgram.
func (mr *MockServiceMockRecorder) LaunchProgram(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LaunchProgram", reflect.TypeOf((*MockService)(nil).LaunchProgram), path)
}

// RawgSearch mocks base method.
func (m *MockService) RawgSearch(program programs.Program) programs.Program {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawgSearch", program)
	ret0, _ := ret[0].(programs.Program)
	return ret0
}

// RawgSearch indicates an expected call of RawgSearch.
func (mr *MockServiceMockRecorder) RawgSearch(program any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawgSearch", reflect.TypeOf((*MockService)(nil).RawgSearch), program)
}

// SaveProgram mocks base method.
func (m *MockService) SaveProgram(req programs.CreateProgramRequest) (*programs.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProgram", req)
	ret0, _ := ret[0].(*programs.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveProgram indicates an expected call of SaveProgram.
func (mr *MockServiceMockRecorder) SaveProgram(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProgram", reflect.TypeOf((*MockService)(nil).SaveProgram), req)
}
