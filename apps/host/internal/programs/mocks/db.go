// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m1thrandir225/imperium/apps/host/internal/programs (interfaces: Database)
//
// Generated by this command:
//
//	mockgen -package mockprograms -destination internal/programs/mocks/db.go github.com/m1thrandir225/imperium/apps/host/internal/programs Database
//

// Package mockprograms is a generated GoMock package.
package mockprograms

import (
	reflect "reflect"

	programs "github.com/m1thrandir225/imperium/apps/host/internal/programs"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
	isgomock struct{}
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// CleanupNonExistentPrograms mocks base method.
func (m *MockDatabase) CleanupNonExistentPrograms() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupNonExistentPrograms")
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupNonExistentPrograms indicates an expected call of CleanupNonExistentPrograms.
func (mr *MockDatabaseMockRecorder) CleanupNonExistentPrograms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupNonExistentPrograms", reflect.TypeOf((*MockDatabase)(nil).CleanupNonExistentPrograms))
}

// GetProgramByID mocks base method.
func (m *MockDatabase) GetProgramByID(id string) (*programs.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProgramByID", id)
	ret0, _ := ret[0].(*programs.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProgramByID indicates an expected call of GetProgramByID.
func (mr *MockDatabaseMockRecorder) GetProgramByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgramByID", reflect.TypeOf((*MockDatabase)(nil).GetProgramByID), id)
}

// GetProgramByPath mocks base method.
func (m *MockDatabase) GetProgramByPath(path string) (*programs.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProgramByPath", path)
	ret0, _ := ret[0].(*programs.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProgramByPath indicates an expected call of GetProgramByPath.
func (mr *MockDatabaseMockRecorder) GetProgramByPath(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgramByPath", reflect.TypeOf((*MockDatabase)(nil).GetProgramByPath), path)
}

// GetPrograms mocks base method.
func (m *MockDatabase) GetPrograms() ([]*programs.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrograms")
	ret0, _ := ret[0].([]*programs.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrograms indicates an expected call of GetPrograms.
func (mr *MockDatabaseMockRecorder) GetPrograms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrograms", reflect.TypeOf((*MockDatabase)(nil).GetPrograms))
}

// SaveProgram mocks base method.
func (m *MockDatabase) SaveProgram(program *programs.Program) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProgram", program)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProgram indicates an expected call of SaveProgram.
func (mr *MockDatabaseMockRecorder) SaveProgram(program any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProgram", reflect.TypeOf((*MockDatabase)(nil).SaveProgram), program)
}
