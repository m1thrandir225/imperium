// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m1thrandir225/imperium/apps/host/internal/host (interfaces: StatusManager)
//
// Generated by this command:
//
//	mockgen -package mockhost -destination internal/host/mocks/status_manager.go github.com/m1thrandir225/imperium/apps/host/internal/host StatusManager
//

// Package mockhost is a generated GoMock package.
package mockhost

import (
	context "context"
	reflect "reflect"

	host "github.com/m1thrandir225/imperium/apps/host/internal/host"
	gomock "go.uber.org/mock/gomock"
)

// MockStatusManager is a mock of StatusManager interface.
type MockStatusManager struct {
	ctrl     *gomock.Controller
	recorder *MockStatusManagerMockRecorder
	isgomock struct{}
}

// MockStatusManagerMockRecorder is the mock recorder for MockStatusManager.
type MockStatusManagerMockRecorder struct {
	mock *MockStatusManager
}

// NewMockStatusManager creates a new mock instance.
func NewMockStatusManager(ctrl *gomock.Controller) *MockStatusManager {
	mock := &MockStatusManager{ctrl: ctrl}
	mock.recorder = &MockStatusManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusManager) EXPECT() *MockStatusManagerMockRecorder {
	return m.recorder
}

// SendStatusUpdate mocks base method.
func (m *MockStatusManager) SendStatusUpdate(ctx context.Context, status host.Status) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendStatusUpdate", ctx, status)
}

// SendStatusUpdate indicates an expected call of SendStatusUpdate.
func (mr *MockStatusManagerMockRecorder) SendStatusUpdate(ctx, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendStatusUpdate", reflect.TypeOf((*MockStatusManager)(nil).SendStatusUpdate), ctx, status)
}

// Start mocks base method.
func (m *MockStatusManager) Start(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx)
}

// Start indicates an expected call of Start.
func (mr *MockStatusManagerMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockStatusManager)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockStatusManager) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockStatusManagerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStatusManager)(nil).Stop))
}

// UpdateStatus mocks base method.
func (m *MockStatusManager) UpdateStatus(status host.Status) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateStatus", status)
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockStatusManagerMockRecorder) UpdateStatus(status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockStatusManager)(nil).UpdateStatus), status)
}
