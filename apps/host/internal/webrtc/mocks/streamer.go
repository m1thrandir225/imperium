// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m1thrandir225/imperium/apps/host/internal/webrtc (interfaces: Streamer)
//
// Generated by this command:
//
//	mockgen -package mockwebrtc -destination internal/webrtc/mocks/streamer.go github.com/m1thrandir225/imperium/apps/host/internal/webrtc Streamer
//

// Package mockwebrtc is a generated GoMock package.
package mockwebrtc

import (
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStreamer is a mock of Streamer interface.
type MockStreamer struct {
	ctrl     *gomock.Controller
	recorder *MockStreamerMockRecorder
	isgomock struct{}
}

// MockStreamerMockRecorder is the mock recorder for MockStreamer.
type MockStreamerMockRecorder struct {
	mock *MockStreamer
}

// NewMockStreamer creates a new mock instance.
func NewMockStreamer(ctrl *gomock.Controller) *MockStreamer {
	mock := &MockStreamer{ctrl: ctrl}
	mock.recorder = &MockStreamerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamer) EXPECT() *MockStreamerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStreamer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStreamerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStreamer)(nil).Close))
}

// HandleOffer mocks base method.
func (m *MockStreamer) HandleOffer(offerSDP string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleOffer", offerSDP)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleOffer indicates an expected call of HandleOffer.
func (mr *MockStreamerMockRecorder) HandleOffer(offerSDP any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleOffer", reflect.TypeOf((*MockStreamer)(nil).HandleOffer), offerSDP)
}

// StartStream mocks base method.
func (m *MockStreamer) StartStream(stream io.ReadCloser, fps int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartStream", stream, fps)
}

// StartStream indicates an expected call of StartStream.
func (mr *MockStreamerMockRecorder) StartStream(stream, fps any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartStream", reflect.TypeOf((*MockStreamer)(nil).StartStream), stream, fps)
}
