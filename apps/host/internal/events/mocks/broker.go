// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m1thrandir225/imperium/apps/host/internal/events (interfaces: EventBroker)
//
// Generated by this command:
//
//	mockgen -package mockevent_broker -destination internal/events/mocks/broker.go github.com/m1thrandir225/imperium/apps/host/internal/events EventBroker
//

// Package mockevent_broker is a generated GoMock package.
package mockevent_broker

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEventBroker is a mock of EventBroker interface.
type MockEventBroker struct {
	ctrl     *gomock.Controller
	recorder *MockEventBrokerMockRecorder
	isgomock struct{}
}

// MockEventBrokerMockRecorder is the mock recorder for MockEventBroker.
type MockEventBrokerMockRecorder struct {
	mock *MockEventBroker
}

// NewMockEventBroker creates a new mock instance.
func NewMockEventBroker(ctrl *gomock.Controller) *MockEventBroker {
	mock := &MockEventBroker{ctrl: ctrl}
	mock.recorder = &MockEventBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventBroker) EXPECT() *MockEventBrokerMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockEventBroker) Publish(topic string, data any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", topic, data)
}

// Publish indicates an expected call of Publish.
func (mr *MockEventBrokerMockRecorder) Publish(topic, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockEventBroker)(nil).Publish), topic, data)
}

// Subscribe mocks base method.
func (m *MockEventBroker) Subscribe(topic string) <-chan any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", topic)
	ret0, _ := ret[0].(<-chan any)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockEventBrokerMockRecorder) Subscribe(topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockEventBroker)(nil).Subscribe), topic)
}
