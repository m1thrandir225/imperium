// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m1thrandir225/imperium/apps/host/internal/session (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -package mocksession -destination internal/session/mocks/service.go github.com/m1thrandir225/imperium/apps/host/internal/session Service
//

// Package mocksession is a generated GoMock package.
package mocksession

import (
	context "context"
	reflect "reflect"

	input "github.com/m1thrandir225/imperium/apps/host/internal/input"
	programs "github.com/m1thrandir225/imperium/apps/host/internal/programs"
	session "github.com/m1thrandir225/imperium/apps/host/internal/session"
	video "github.com/m1thrandir225/imperium/apps/host/internal/video"
	webrtc "github.com/m1thrandir225/imperium/apps/host/internal/webrtc"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// EndSession mocks base method.
func (m *MockService) EndSession() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndSession")
	ret0, _ := ret[0].(error)
	return ret0
}

// EndSession indicates an expected call of EndSession.
func (mr *MockServiceMockRecorder) EndSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndSession", reflect.TypeOf((*MockService)(nil).EndSession))
}

// GenerateWebRTCAnswer mocks base method.
func (m *MockService) GenerateWebRTCAnswer(offer string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateWebRTCAnswer", offer)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateWebRTCAnswer indicates an expected call of GenerateWebRTCAnswer.
func (mr *MockServiceMockRecorder) GenerateWebRTCAnswer(offer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateWebRTCAnswer", reflect.TypeOf((*MockService)(nil).GenerateWebRTCAnswer), offer)
}

// GetCurrentSession mocks base method.
func (m *MockService) GetCurrentSession() *session.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentSession")
	ret0, _ := ret[0].(*session.Session)
	return ret0
}

// GetCurrentSession indicates an expected call of GetCurrentSession.
func (mr *MockServiceMockRecorder) GetCurrentSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentSession", reflect.TypeOf((*MockService)(nil).GetCurrentSession))
}

// GetPrograms mocks base method.
func (m *MockService) GetPrograms() ([]*programs.Program, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrograms")
	ret0, _ := ret[0].([]*programs.Program)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrograms indicates an expected call of GetPrograms.
func (mr *MockServiceMockRecorder) GetPrograms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrograms", reflect.TypeOf((*MockService)(nil).GetPrograms))
}

// ProcessInputCommand mocks base method.
func (m *MockService) ProcessInputCommand(cmd input.InputCommand) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessInputCommand", cmd)
}

// ProcessInputCommand indicates an expected call of ProcessInputCommand.
func (mr *MockServiceMockRecorder) ProcessInputCommand(cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessInputCommand", reflect.TypeOf((*MockService)(nil).ProcessInputCommand), cmd)
}

// StartSession mocks base method.
func (m *MockService) StartSession(ctx context.Context, cmd session.StartSessionCommand) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSession", ctx, cmd)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSession indicates an expected call of StartSession.
func (mr *MockServiceMockRecorder) StartSession(ctx, cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSession", reflect.TypeOf((*MockService)(nil).StartSession), ctx, cmd)
}

// UpdateVideoConfig mocks base method.
func (m *MockService) UpdateVideoConfig(cfg *video.Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateVideoConfig", cfg)
}

// UpdateVideoConfig indicates an expected call of UpdateVideoConfig.
func (mr *MockServiceMockRecorder) UpdateVideoConfig(cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVideoConfig", reflect.TypeOf((*MockService)(nil).UpdateVideoConfig), cfg)
}

// WebRTCStreamer mocks base method.
func (m *MockService) WebRTCStreamer() *webrtc.Streamer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WebRTCStreamer")
	ret0, _ := ret[0].(*webrtc.Streamer)
	return ret0
}

// WebRTCStreamer indicates an expected call of WebRTCStreamer.
func (mr *MockServiceMockRecorder) WebRTCStreamer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebRTCStreamer", reflect.TypeOf((*MockService)(nil).WebRTCStreamer))
}
