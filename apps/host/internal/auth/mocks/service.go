// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/m1thrandir225/imperium/apps/host/internal/auth (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -package mockauth -destination internal/auth/mocks/service.go github.com/m1thrandir225/imperium/apps/host/internal/auth Service
//

// Package mockauth is a generated GoMock package.
package mockauth

import (
	context "context"
	reflect "reflect"

	auth "github.com/m1thrandir225/imperium/apps/host/internal/auth"
	httpclient "github.com/m1thrandir225/imperium/apps/host/internal/httpclient"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateHost mocks base method.
func (m *MockService) CreateHost(ctx context.Context, req auth.CreateHostRequest) (*auth.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHost", ctx, req)
	ret0, _ := ret[0].(*auth.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHost indicates an expected call of CreateHost.
func (mr *MockServiceMockRecorder) CreateHost(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHost", reflect.TypeOf((*MockService)(nil).CreateHost), ctx, req)
}

// GetAuthURL mocks base method.
func (m *MockService) GetAuthURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAuthURL indicates an expected call of GetAuthURL.
func (mr *MockServiceMockRecorder) GetAuthURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthURL", reflect.TypeOf((*MockService)(nil).GetAuthURL))
}

// GetAuthenticatedClient mocks base method.
func (m *MockService) GetAuthenticatedClient() *httpclient.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthenticatedClient")
	ret0, _ := ret[0].(*httpclient.Client)
	return ret0
}

// GetAuthenticatedClient indicates an expected call of GetAuthenticatedClient.
func (mr *MockServiceMockRecorder) GetAuthenticatedClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthenticatedClient", reflect.TypeOf((*MockService)(nil).GetAuthenticatedClient))
}

// GetHostByName mocks base method.
func (m *MockService) GetHostByName(ctx context.Context, hostname string) (*auth.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostByName", ctx, hostname)
	ret0, _ := ret[0].(*auth.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostByName indicates an expected call of GetHostByName.
func (mr *MockServiceMockRecorder) GetHostByName(ctx, hostname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostByName", reflect.TypeOf((*MockService)(nil).GetHostByName), ctx, hostname)
}

// GetOrCreateHost mocks base method.
func (m *MockService) GetOrCreateHost(ctx context.Context, hostname, ipAddress string, port int) (*auth.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateHost", ctx, hostname, ipAddress, port)
	ret0, _ := ret[0].(*auth.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateHost indicates an expected call of GetOrCreateHost.
func (mr *MockServiceMockRecorder) GetOrCreateHost(ctx, hostname, ipAddress, port any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateHost", reflect.TypeOf((*MockService)(nil).GetOrCreateHost), ctx, hostname, ipAddress, port)
}

// Login mocks base method.
func (m *MockService) Login(ctx context.Context, req auth.LoginRequest) (*auth.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req)
	ret0, _ := ret[0].(*auth.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockServiceMockRecorder) Login(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockService)(nil).Login), ctx, req)
}

// RefreshAccessToken mocks base method.
func (m *MockService) RefreshAccessToken(ctx context.Context, refreshToken string) (*auth.RefreshTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshAccessToken", ctx, refreshToken)
	ret0, _ := ret[0].(*auth.RefreshTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshAccessToken indicates an expected call of RefreshAccessToken.
func (mr *MockServiceMockRecorder) RefreshAccessToken(ctx, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshAccessToken", reflect.TypeOf((*MockService)(nil).RefreshAccessToken), ctx, refreshToken)
}

// Register mocks base method.
func (m *MockService) Register(ctx context.Context, req auth.RegisterRequest) (*auth.RegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, req)
	ret0, _ := ret[0].(*auth.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockServiceMockRecorder) Register(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockService)(nil).Register), ctx, req)
}

// RegisterHost mocks base method.
func (m *MockService) RegisterHost(ctx context.Context, hostname, ipAddress string, port int) (*auth.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterHost", ctx, hostname, ipAddress, port)
	ret0, _ := ret[0].(*auth.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterHost indicates an expected call of RegisterHost.
func (mr *MockServiceMockRecorder) RegisterHost(ctx, hostname, ipAddress, port any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHost", reflect.TypeOf((*MockService)(nil).RegisterHost), ctx, hostname, ipAddress, port)
}
